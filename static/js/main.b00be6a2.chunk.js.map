{"version":3,"sources":["components/header/index.js","components/images/index.js","components/wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","score","message","Images","className","data-id","id","onClick","imageClick","alt","name","src","image","Wrapper","children","App","state","avengers","highScore","guesses","includes","setState","console","log","makeImagesRandom","concat","random","array","i","length","j","Math","floor","randomArray","this","map","avenger","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"q7EAkBeA,MAhBf,SAAgBC,GACZ,OACI,6BACI,mDACA,4HACA,oJACA,2FACA,4BACI,8CAAoBA,EAAMC,OAC1B,wCAAcD,EAAME,UAExB,+B,MCEGC,MAZf,SAAgBH,GACZ,OACI,yBAAKI,UAAU,QACX,yBAAKC,UAASL,EAAMM,GAAIC,QAAS,kBAAMP,EAAMQ,WAAWR,EAAMM,MAC1D,yBAAKF,UAAU,iBACX,yBAAKK,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,Y,qBCDtCC,MAJf,SAAiBb,GACf,OAAO,yBAAKI,UAAU,WAAWJ,EAAMc,W,ICsE1BC,E,2MAzDbC,MAAQ,CACNC,WACAhB,MAAO,EACPiB,UAAW,EACXC,QAAS,GACTjB,QAAS,I,EAGXM,WAAa,SAAAF,GACP,EAAKU,MAAMG,QAAQC,SAASd,IAC9B,EAAKe,SAAS,CACZF,QAAS,GACTlB,MAAO,EACPC,QAAS,oDAEXoB,QAAQC,IAAI,EAAKP,MAAMf,OACvB,EAAKuB,oBACyB,IAArB,EAAKR,MAAMf,OACpB,EAAKoB,SAAS,CACZF,QAAS,GACTlB,MAAO,EACPC,QAAS,yCAEXoB,QAAQC,IAAI,EAAKP,MAAMf,OACvB,EAAKuB,qBAEL,EAAKH,SAAS,CACZF,QAAS,EAAKH,MAAMG,QAAQM,OAAOnB,GACnCL,MAAO,EAAKe,MAAMf,MAAQ,EAC1BC,QAAS,iDAEXoB,QAAQC,IAAI,EAAKP,MAAMf,OACvB,EAAKuB,qB,EAITA,iBAAmB,WACjB,IAAIE,EA/CR,SAAqBC,GACnB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKL,UAAYE,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,EA0CQM,CAAYhB,GACzB,EAAKI,SAAS,CAAEJ,SAAUS,K,wEAGlB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEzB,MAAOiC,KAAKlB,MAAMf,MAClBC,QAASgC,KAAKlB,MAAMd,UAEtB,yBAAKI,GAAG,cACL4B,KAAKlB,MAAMC,SAASkB,IAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,iBAAYA,EAAZ,CAAqB5B,WAAY,EAAKA,sB,GAnDlE6B,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b00be6a2.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(props) {\n    return (\n        <div>\n            <h1>Avengers Click Game</h1>\n            <p>This is a simple game built in React to test your memory. Click images and they will rotate. </p>\n            <p>The objective is to click images you have not already chosen. As you successfully do that, the score will increment. </p>\n            <p>If you choose one already clicked, the game will start over.</p>\n            <ul>\n                <li>Current Score: {props.score}</li>\n                <li>Message: {props.message}</li>\n            </ul>\n            <hr></hr>\n        </div>\n    )\n}\n\nexport default Header","import React from 'react';\nimport './styles.css';\n\nfunction Images(props) {\n    return (\n        <div className=\"card\">\n            <div data-id={props.id} onClick={() => props.imageClick(props.id)}>\n                <div className=\"img-container\" >\n                    <img alt={props.name} src={props.image} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Images;","import React from \"react\";\nimport \"./styles.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from 'react';\nimport Header from './components/header/index';\nimport Images from './components/images';\nimport './App.css';\nimport avengers from './avengers.json';\nimport Wrapper from './components/wrapper';\n\nfunction randomArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n\n  state = {\n    avengers,\n    score: 0,\n    highScore: 0,\n    guesses: [],\n    message: \"\"\n  };\n\n  imageClick = id => {\n    if (this.state.guesses.includes(id)) {\n      this.setState({\n        guesses: [],\n        score: 0,\n        message: \"Sorry, that was incorrect!  Reshuffling images.\"\n      });\n      console.log(this.state.score)\n      this.makeImagesRandom()\n    } else if (this.state.score === 9) {\n      this.setState({\n        guesses: [],\n        score: 0,\n        message: \"Great job!  You got them all right!!\"\n      });\n      console.log(this.state.score)\n      this.makeImagesRandom()\n    } else {\n      this.setState({\n        guesses: this.state.guesses.concat(id),\n        score: this.state.score + 1,\n        message: \"Correct.  I love you 3000! Let's keep going.\"\n      });\n      console.log(this.state.score)\n      this.makeImagesRandom()\n    };\n  };\n\n  makeImagesRandom = () => {\n    let random = randomArray(avengers);\n    this.setState({ avengers: random });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Header \n          score={this.state.score}\n          message={this.state.message}\n        />\n        <div id=\"image-area\">\n          {this.state.avengers.map(avenger => <Images {...avenger} imageClick={this.imageClick} />)}\n        </div>\n      </Wrapper>\n    );\n  };\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}